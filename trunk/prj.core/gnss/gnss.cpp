#include "gnss/gnss.h"
#include <string>
#include <fstream>
#include <iostream>
#include <algorithm>
#include <cassert>
#include <opencv2/imgproc/imgproc.hpp> 

#include <prj.core/markup/kitti.h>
#include <prj.core/ocvutils/precomp.h> 
using namespace std;


/*
example of .nmea record produced by akenori
---------------
$GPRMC,090450.00,A,5872.77527,N,03674.93726,E,13.517,0.07,271114,,,A*59
$GSENSOR,336,96,960
$GSENSOR,240,0,1008
$GSENSOR,320,64,912
$GSENSOR,416,-64,1008
$GSENSOR,272,48,928
$GPVTG,0.07,T,,M,13.517,N,25.033,K,A*3C
$GPGGA,090450.00,5872.77527,N,03674.93726,E,1,09,0.96,132.0,M,12.4,M,,*5C
$GPGSA,A,3,22,27,18,19,21,15,04,14,16,,,,1.56,0.96,1.23*0A
$GPGSV,4,1,13,03,29,224,,04,16,279,40,14,13,160,26,15,26,049,37*74
$GPGSV,4,2,13,16,11,224,19,18,62,082,45,19,51,291,43,21,37,104,39*79
$GPGSV,4,3,13,22,67,195,41,26,02,017,,27,64,236,37,28,01,354,23*79
$GPGSV,4,4,13,30,00,327,*4E
$GPGLL,5872.77527,N,03674.93726,E,090450.00,A,A*68
<empty line>
-----------------

5872.77527,N,03674.93726,E, --- where (58 grad 72.77527')
090450.00 --- when (utc)

http://www.radioscanner.ru/info/article166/ description


•	$GPGGA Сообщение содержит GPS данные о местоположении, времени местоопределения, качестве данных, количестве использованных спутников, HDOP (Фактор Ухудшения Точности Плановых Координат), информацию о дифференциальных поправках и их возраст. 
•	$GPGLL Сообщение содержит GPS–данные о географической широте, долготе и времени определения координат. 
•	$GPGSA В этом сообщении отображается режим работы GPS приёмника, параметры спутников, используемых при решении навигационной задачи, результаты которой отображены в сообщении $GPGGA и значения факторов точности определения координат. 
•	$GPGSV В сообщении указывается количество видимых спутников, их номера, возвышение, азимут, и значение отношения сигнал/шум для каждого из них. 
•	$GPRMC Сообщение RMC содержит данные о времени, местоположении, курсе и скорости, передаваемые навигационным GPS приёмником. Контрольная сумма обязательна для этого сообщения, интервалы передачи не должны превышать 2 секунды. Все поля данных должны быть подготовлены, пока ещё нет самих данных. Недействительные поля могут быть использованы, пока данные временно не готовы. 
•	$GPVTG Сообщение VTG передает текущее истинное направление курса (COG) и скорость относительно земли (SOG). 
•	$GPZDA Сообщение ZDA содержит информацию о времени по UTC, календарный день, месяц, год и локальный часовой пояс. 


*/
bool eat_comma( string& line ) // откусить все до запятой. если запятой нет -- вернуть false
{
  size_t pos = line.find_first_of(',');
  if (pos == string::npos)
    return false;
  line = line.substr( pos+1, line.length()-pos-1 );
  return true;
}

double normalize_to_decimal_grad( double x ) 
  // на входе странная конструкция
  // ggmm.dddd[d] где gg -- градусы, mm.dddd минуты с сотыми долями
{ // приводим к градусам с сотыми долями
  double grad = int(x) / 100; // выделили целое число градусов
  double minu = x - grad*100; // выделили минуты с дробной частью
  double res = grad + (minu / 60);
  return res;
} // надо потом учитывать, что мы масштаб по северу и западу получаем разный

bool gprmc( string& line, GNSSRecord& rec )
{ //$GPRMC,090450.00,A,5872.77527,N,03674.93726,E,13.517,0.07,271114,,,A*59
  /*
  RMC – pекомендуемый минимум GPS / навигационных данных 
  1	2	3	4	5	6	7	8	9	10	11	12	
  $GPRMC,	Hhmmss.ss,	A,	1111.11,	A,	yyyyy.yy,	a,	x.x ,	x.x,	ddmmyy,	x.x,	A	*hh	<CR><LF> 
  1. Время фиксации местоположения UTC 
  2. Состояние: А = действительный, V = предупреждение навигационного приёмника 
  3,4. Географическая широта местоположения, Север/Юг 
  5,6. Географическая долгота местоположения, Запад/Восток (E/W) 
  7. Скорость над поверхностью (SOG) в узлах 
  8. Истинное направление курса в градусах 
  9. Дата: dd/mm/yy 
  10. Магнитное склонение в градусах 
  11. Запад/Восток (E/W) 
  12. Контрольная сумма строки (обязательно) 
  Пример сообщения: 
  $GPRMC,113650.0,A,5548.607,N,03739.387,E,000.01,25 5.6,210403,08.7,E*69 

  */
  
  size_t pos = string::npos;
  size_t len = line.length();

  // cut command "$GPRMC,"
  string command;
  pos = line.find_first_of(',');
  if (pos != string::npos)
  {
    command = line.substr( 0, pos );
    len -= pos+1;
    line = line.substr( pos+1, len );
  } else 
    return false;

  // cut time "090450.00,"
  string utc_time;
  pos = line.find_first_of(',');
  if (pos != string::npos)
  {
    utc_time = line.substr( 0, pos );
    len -= pos+1;
    line = line.substr( pos+1, len );
  } else 
    return false;
  double hhmmss_ss = atof( utc_time.c_str() );
  int hhmmss = int( hhmmss_ss ); // последние два знака после точки -- доли секунды (HHMMSS.SS)
  int ss = hhmmss%100; // количество полных секунд после начала текущей минуты
  double _ss = hhmmss_ss - hhmmss; // количество дробных секунд
  int hhmm = hhmmss/100; // последние два знака после округления -- секунды (HHMMSS)
  int mm = hhmm%100; // количество полных минут после начала текущего часа суток
  int hh = hhmm/100; // количество полных часов после полуночи
  rec.time = (hh*60+mm)*60 + ss + _ss;

  eat_comma(line); // skip "A,"

  string nord;
  pos = line.find_first_of(',');
  if (pos != string::npos)
  {
    nord = line.substr( 0, pos );
    len -= pos+1;
    line = line.substr( pos+1, len );
  } else 
    return false;
  rec.nord = normalize_to_decimal_grad( atof( nord.c_str() ) );

  eat_comma(line); // skip "N,"

  string east;
  pos = line.find_first_of(',');
  if (pos != string::npos)
  {
    east = line.substr( 0, pos );
    len -= pos+1;
    line = line.substr( pos+1, len );
  } else 
    return false;
  rec.east = normalize_to_decimal_grad( atof( east.c_str() ) );

  // todo .. direction etc

  return true;
}


bool NMEA::load( const std::string& filename )
{
  ifstream ifs( filename.c_str() );
  string line;
  if (!ifs.is_open())
    return false;

  double start_time = -1.;

  while ( std::getline( ifs, line ) )
  {
    if (line.empty()) // spaces?
      continue;

    if( line.size() > 0 && line[0] == '[' ) {
        int start_pos = line.find( "$GP" );
        line = std::string( line, start_pos, line.size() - start_pos );
    }

    if (line.find( "$GP" ) != 0)
      continue;

    if (line.find( "$GPRMC" ) == 0) //$GPRMC,090450.00,A,5872.77527,N,03674.93726,E,13.517,0.07,271114,,,A*59
      /// •	$GPRMC Сообщение RMC содержит данные о времени, местоположении, курсе и скорости, 
      /// передаваемые навигационным GPS приёмником. Контрольная сумма обязательна для этого сообщения, 
      /// интервалы передачи не должны превышать 2 секунды. Все поля данных должны быть подготовлены, пока ещё 
      /// нет самих данных. Недействительные поля могут быть использованы, пока данные временно не готовы. 
    {
      GNSSRecord rec;
      gprmc( line, rec );
      if (start_time < 0)
        start_time = rec.time;
      rec.time -= start_time;
      if (rec.time < -12*60*60) // перевалили через полночь по UTC
        rec.time += 24*60*60; // todo TEST!

      records.push_back(rec);
    }
  }

  return true;
}


bool NMEA::loadKitti( const std::string &filename )
{
  string timestampfname = filename + "/oxts/timestamps.txt";
  vector<double> timestamps;

  if (!readTimeStamps(timestampfname, timestamps))
  {
    cout << "error reading timestamps file " << timestampfname << endl;
    return false;
  }
  for (unsigned int i = 0; i < timestamps.size(); ++i)
  {
    string oxtfname = filename + format("/oxts/data/%010d.txt", i);
    ifstream fin(oxtfname);
    if (!fin.good())
    {
      cout << "error reading oxt (gnss) record number " << i << endl;
      return false;
    }
    double nord, east;
    fin >> nord >> east;
    records.push_back(GNSSRecord(timestamps[i] - timestamps[0], nord, east));
  }
  return true;
}


inline bool compareByTime( const GNSSRecord& rec, const GNSSRecord& val )
{
  return rec.time < val.time;
}

bool NMEA::getEastNord( double time, double& east, double& nord )
{
  GNSSRecord rec(time);
  vector< GNSSRecord >::iterator low = std::lower_bound( records.begin(), records.end(), rec, compareByTime );
  if (low == records.end() && records.size() > 0)
  {
    assert( records.back().time < time );
    if (time - records.back().time <= 1.)
      low--;
    else
      return false;
  }
  if (low == records.end()-1)
  {
    east = low->east;
    nord = low->nord;
    return true;
  }

// interpolate
  GNSSRecord a = *low;
  GNSSRecord b = *(low+1);
  east = a.east + (b.east - a.east)*(time-a.time) / (b.time-a.time); 
  nord = a.nord + (b.nord - a.nord)*(time-a.time) / (b.time-a.time);
  return true;
}

////////////////////////////////////////////////////////////////
// OpenCv specific part
#include <opencv/cv.h>
#include <opencv/highgui.h>

#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>

using namespace cv;

void NMEA::draw()
{
  Mat3b display(300,200);
  if (records.size() < 1)
    return;

  double mi_nord = records[0].nord;
  double ma_nord = records[0].nord;
  double mi_east = records[0].east;
  double ma_east = records[0].east;
  for (int i=1; i < int( records.size() ); i++)
  {
    mi_nord = min( records[i].nord, mi_nord );
    ma_nord = max( records[i].nord, ma_nord );
    mi_east = min( records[i].east, mi_east );
    ma_east = max( records[i].east, ma_east );
  }
  
  Scalar col( 255,0,255, 0);
  double alpha =  display.cols / (ma_east-mi_east);
  double betha =  display.rows / (ma_nord-mi_nord);
  for (int i=1; i < int( records.size() );i++)
  {
    Point2d p1( ( records[i-1].east - mi_east) * alpha, display.rows - ( records[i-1].nord - mi_nord ) * betha );
    Point2d p2( ( records[i].east   - mi_east) * alpha, display.rows - ( records[i].nord   - mi_nord ) * betha );
    line( display, p1, p2, col, 2 );
  }

  imshow("NMEA", display );
  waitKey(0);
}

//////////////////////////////////////
#if 0
NMEA – это формат передачи сообщений между корабельными приборами. Он включает в себя систему сообщений для обмена информацией между навигационными GPS приёмниками и потребителями навигационной информации. Все команды и сообщения передаются в текстовом ASCII виде, относящиеся к GPS приёмникам начинаются с $GP, в конце строки сообщения должны быть символы <CR><LF>. В последнем поле сообщения может быть указана контрольная сумма текущего сообщения, начинающаяся с разделителя *. Контрольная сумма 8 – ми битная (исключающая ИЛИ) всех символов сообщения, включая пробелы, расположенных между разделителями $ и *, не включая последних. Шестнадцатеричный результат переводится в два ASCII символа (0-9, A-F). 

Содержание некоторых сообщений протокола NMEA версии 2.1 

•	$GPGGA Сообщение содержит GPS данные о местоположении, времени местоопределения, качестве данных, количестве использованных спутников, HDOP (Фактор Ухудшения Точности Плановых Координат), информацию о дифференциальных поправках и их возраст. 
•	$GPGLL Сообщение содержит GPS–данные о географической широте, долготе и времени определения координат. 
•	$GPGSA В этом сообщении отображается режим работы GPS приёмника, параметры спутников, используемых при решении навигационной задачи, результаты которой отображены в сообщении $GPGGA и значения факторов точности определения координат. 
•	$GPGSV В сообщении указывается количество видимых спутников, их номера, возвышение, азимут, и значение отношения сигнал/шум для каждого из них. 
•	$GPRMC Сообщение RMC содержит данные о времени, местоположении, курсе и скорости, передаваемые навигационным GPS приёмником. Контрольная сумма обязательна для этого сообщения, интервалы передачи не должны превышать 2 секунды. Все поля данных должны быть подготовлены, пока ещё нет самих данных. Недействительные поля могут быть использованы, пока данные временно не готовы. 
•	$GPVTG Сообщение VTG передает текущее истинное направление курса (COG) и скорость относительно земли (SOG). 
•	$GPZDA Сообщение ZDA содержит информацию о времени по UTC, календарный день, месяц, год и локальный часовой пояс. 

GGA - GPS Данные о местоположении 
1	2	3	4	5	6	7	8	9	10	11	12	13	14 15 
$GPGGA,	hhmmss.ss,	1111.11,	a,	yyyyy.yy,	a,	x,	xx, x.x,	xxx,	M,	x.x,	M,	x.x,	xxxx*hh 
1. Гринвичское время на момент определения местоположения. 
2. Географическая широта местоположения. 
3. Север/Юг (N/S). 
4. Географическая долгота местоположения. 
5. Запад/Восток (E/W). 
6. Индикатор качества GPS сигнала: 
0 = Определение местоположения не возможно или не верно; 
1 = GPS режим обычной точности, возможно определение местоположения; 
2 = Дифференциальный GPS режим, точность обычная, возможно определение местоположения; 
3 = GPS режим прецизионной точности, возможно определение местоположения. 
7. Количество используемых спутников (00-12, может отличаться от числа видимых). 
8. Фактор Ухудшения Точности Плановых Координат (HDOP). 
9. Высота антенны приёмника над/ниже уровня моря. 
10. Единица измерения высоты расположения антенны, метры. 
11. Геоидальное различие - различие между земным эллипсоидом WGS-84 и уровнем моря(геоидом), ”-” = уровень моря ниже эллипсоида. 
12. Единица измерения различия, метры. 
13. Возраст Дифференциальных данных GPS - Время в секундах с момента последнего SC104 типа 1 или 9 обновления, заполнено нулями, если дифференциальный режим не используется. 
14. Индификатор станции, передающей дифференциальные поправки, ID, 0000-1023. 
15. Контрольная сумма строки. 
Пример сообщения: 
$GPGGA,004241.47,5532.8492,N,03729.0987,E,1,04,2.0 ,-0015,M,,,,*31 

GLL - географическое положение — Широта/Долгота 
1	2	3	4	5	6 7	
$GPGLL,	1111.11,	a,	yyyyy.yy,	a,	hhmmss.ss,	A*hh	< CR><LF> 
1. Географическая широта местоположения. 
2. Север/Юг (N/S). 
3. Географическая долгота местоположения. 
4. Запад/Восток (E/W). 
5. Гринвичское время на момент определения местоположения. 
6. Статус A = данные верны 
V = данные не верны 
7. Контрольная сумма строки. 
Пример сообщения: 
$GPGLL,5532.8492,N,03729.0987,E,004241.469,A*33 

GSA - GPS факторы точности и активные спутники 
В этом сообщении отображается режим работы GPS приёмника, параметры спутников, используемых при решении навигационной задачи, результаты которой отображены в сообщении $GPGGA и значения факторов точности определения координат. 
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 18	
$GPGSA,	a,	x,	xx,	xx,	xx,	xx,	xx,	xx,	xx,	xx,	xx,	xx,	xx,	xx,	x.x,	x.x,	x.x*hh	<CR><LF> 
1. Режим: M = Ручной, принудительно включен 2D или 3D режим; 
A = Автоматический, разрешено автомат. выбирать 2D/3D. 
2. Режим: 1 = Местоположение не определено, 2 = 2D, 3 = 3D 
3-14. PRN номера спутников, использованных при решении задачи местоопределения (нули для неиспользованных). 
15. Фактор PDOP. 
16. Фактор HDOP. 
17. Фактор VDOP. 
18. Контрольная сумма строки. 
Пример сообщения: 
$GPGSA,A,3,01,02,03,04,,,,,,,,,2.0,2.0,2.0*34 

GSV - видимые спутники GPS 
В этом сообщении отображается число видимых спутников(SV), PRN номера этих спутников, их высота над местным горизонтом, азимут и отношение сигнал/шум. В каждом сообщении может быть информация не более чем о четырех спутниках, остальные данные могут быть расположены в следующих по порядку $GPGSV сообщениях. Полное число отправляемых сообщений и номер текущего сообщения указаны в первых двух полях каждого сообщения. 
1	2	3	4	5	6	7 8 15	16	17	18	19 20	
$GPGSV,	x,	x,	xx,	xx,	xx,	xxx,	xx...........,	xx,	xx,	xxx,	xx*hh	<CR><LF> 
1. Полное число сообщений, от 1 до 9. 
2. Номер сообщения, от 1 до 9. 
3. Полное число видимых спутников. 
4. PRN номер спутника. 
5. Высота, градусы, (90° - максимум). 
6. Азимут истинный, градусы, от 000° до 359°. 
7. Отношение сигнал/шум от 00 до 99 дБ, ноль - когда нет сигнала. 
8-11. Тоже, что в 4-7 для второго спутника. 
12-15. Тоже, что в 4-7 для третьего спутника. 
16-19. Тоже, что в 4-7 для четвертого спутника. 
20. Контрольная сумма строки. 
Пример сообщения: 
$GPGSV,3,1,12,02,86,172,,09,62,237,,22,39,109,,27, 37,301,*7A 
$GPGSV,3,2,12,17,28,050,,29,21,314,,26,18,246,,08, 10,153,*7F 
$GPGSV,3,3,12,07,08,231,,10,08,043,,04,06,170,,30, 00,281,*77 

RMC – pекомендуемый минимум GPS / навигационных данных 
1	2	3	4	5	6	7	8	9	10	11	12	
$GPRMC,	Hhmmss.ss,	A,	1111.11,	A,	yyyyy.yy,	a,	x.x ,	x.x,	ddmmyy,	x.x,	A	*hh	<CR><LF> 
1. Время фиксации местоположения UTC 
2. Состояние: А = действительный, V = предупреждение навигационного приёмника 
3,4. Географическая широта местоположения, Север/Юг 
5,6. Географическая долгота местоположения, Запад/Восток (E/W) 
7. Скорость над поверхностью (SOG) в узлах 
8. Истинное направление курса в градусах 
9. Дата: dd/mm/yy 
10. Магнитное склонение в градусах 
11. Запад/Восток (E/W) 
12. Контрольная сумма строки (обязательно) 
Пример сообщения: 
$GPRMC,113650.0,A,5548.607,N,03739.387,E,000.01,25 5.6,210403,08.7,E*69 

VTG – истинное направление курса и скорость относительно земли 
1	2	3	4	5	
$GPVTG,	x.x, T	x.x, M	x.x, N	x.x, K	*hh	<CR><LF> 
1. Направление курса в градусах, T 
2. Магнитное склонение в градусах, М 
3. Скорость над поверхностью (SOG) в узлах, N = узлы 
4. Скорость над поверхностью (SOG) в км/ч, К = км/ч 
5. hh Контрольная сумма строки (обязательно) 
Пример сообщения: 
$GPVTG,217.5,T,208.8,M,000.00,N,000.01,K*4C 

ZDA – время и дата 
1	2	3	4	5	6	7	
$GPZDA,	hhmmss.s,	xx,	xx,	xxxx,	xx,	xx	*hh	<CR><LF > 
1.	Время UTC 
2.	День (01до 31) 
3.	Месяц (01 to 12) 
4.	Год 
5.	Часовой пояс, смещение от GMT, от 00 до ± 13 часов 
6.	Часовой пояс, смещение от GMT, минуты 
7.	hh Контрольная сумма строки 
Пример сообщения: 
$GPZDA,172809,12,07,1996,00,00*45 
#endif